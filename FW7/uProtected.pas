unit uProtected;

interface

uses
  SmartCL.System.Lite,
  uApplicationLite,
  SynCrossPlatformREST,
  SmartTests,
  mORMotClient,  // unit generated by the server!
  FW7;

type
  { TProtected }
  TProtected = class
  public
    class function InitializeObject: TObject;
  end;

implementation

Const
  btnRemoteTests  = '.sync-btn';
  btnOfflineTests = '.async-btn';
  EditA  = 'input[type="number"]';
  EditB  = '#volume';
  BtnClose = '.close-login-screen';
  BtnSign = '.sign-login-screen';
  BtnRegister = '.reg-login';
  user         = 'input[name="username"]';
  pass         = 'input[name="password"]';
  email        = 'input[name="email"]';


uses uLogin, uMain;

procedure onCreate;
begin
{ Async button event }

DOM7('input[type="range"]').on('input change', function(event: variant) : variant
begin
  //WriteLn(event.target.value);
  TServiceCalculator.Create(client).Add(StrToInt(DOM7(EditA).val()),
    StrToInt(event.target.value),

    lambda(res: integer)
    //LabelResult.Caption := format('Result = %d',[res]);
    DOM7('.res').html(format('Result = <b><font color="green"> %d',[res])+'</font></b>');
    //WriteLn(format('Result = %d', [res]));
    end,
    lambda
      DOM7('.res').html('Error calling the method!');
      WriteLn('Error calling the method!');
    end);

  end);

{ Remote mORMot tests event }
DOM7(btnRemoteTests).on('click', function(eventObject: JFramework7EventObject): Variant
var
  model: TSQLModel;
begin
  WriteLn('btn Remote was clicked!');
  time('ORM');
  //BrowserAPI.console.time('ORM');
  WriteLn('Creating Data Model');
  model := GetModel;
  model.GetTableIndexExisting(TSQLRecordPeople);
  var people := new TSQLRecordPeople;
  var s := model.InfoExisting(people.RecordClass).ToJSONAdd(nil,people,true,'');
  assert(s='{"RowID":0,"FirstName":"","LastName":"","YearOfBirth":0,"YearOfDeath":0,'+
    '"Sexe":0,"Simple":{"F":"","G":[],"H":{"H1":0,"H2":"","H3":{"H3a":false,"H3b":null}},"I":"","J":[]}}');
  s := '{"RowID":10,"FirstName":"ab\"c","LastName":"def","YearOfBirth":20,"YearOfDeath":30,'+
    '"Sexe":1,"Simple":{"F":"","G":[],"H":{"H1":0,"H2":"","H3":{"H3a":false,"H3b":null}},"I":"","J":['+
      '{"J1":1,"J2":"","J3":"reLast"}]}}';
  assert(people.FromJSON(s));
  assert(people.ID=10);
  assert(people.FirstName='ab"c');
  assert(people.LastName='def');
  assert(people.YearOfBirth=20);
  assert(people.YearOfDeath=30);
  assert(people.Sexe=sMale);
  assert(people.Simple.J.Count=1);
  assert(people.Simple.J[0].J1=1);
  assert(people.Simple.J[0].J3=reLast);
  WriteLn('Connecting to the server at 127.0.0.1:888');

  GetClient('127.0.0.1','User','synopse',
  lambda(client)
    client.LogToRemoteServer(LOG_VERBOSE,'localhost');
    writeln('Safely connected with SessionID='+IntToStr(client.Authentication.SessionID));
    people := TSQLRecordPeople.Create(client,1);
    assert(people.ID=1);
    writeln(people.ToJSON(client.Model,'*'));
    writeln('Testing remote CRUD methods');
    ORMTest(client);
    //BrowserAPI.console.timeEnd('ORM');
    timeEnd('ORM');
    //BrowserAPI.console.time('SOA');
    time('SOA');
    writeln('Testing SOA remote access');
    SOATest(client,
    lambda
      writeln('Disconnect from server');
      client.Free;
      //BrowserAPI.console.timeEnd('SOA');
      timeEnd('SOA');
    end,
    lambda
      writeln('ERROR!');
      writeln('Disconnect from server');
      client.Free;
      //BrowserAPI.console.timeEnd('SOA');
      timeEnd('SOA');
    end);

  end,
  lambda
    //ShowMessage('Impossible to connect to the server');
    TApplication(self).myApp.alert('Impossible to continue!');
    writeln('ERROR at GetClient');
    //BrowserAPI.console.timeEnd('ORM');
    timeEnd('ORM');
  end);
end);

{ OffLine mORMot tests event }
DOM7(btnOfflineTests).on('click', function(eventObject: JFramework7EventObject): Variant
begin
WriteLn('----------------------');
  time('LowLevel');
  TestSMS;
  timeEnd('LowLevel');
  TApplication(self).myApp.alert('Finished!');
end);

End;

class function TProtected.InitializeObject: TObject;
begin
  WriteLn('TProtected was fired');
  onCreate;
   //DOM7(".toolbar .link").eq(1).attr('style', 'display:block'); // show login
end;

end.
